-- 1. Проанализировать какие запросы могут выполняться наиболее часто в процессе работы приложения 
-- и добавить необходимые индексы.

-- (а. Чтобы не повторяться: если базе 'vk' в таблице есть поле 'id', то индекс по нему уже есть.)
-- (б. Все добавленные в рамках этого п.з. индексы (кроме полнотекстовых) - неуникальные.)

-- 1.1. Поиск/сортировка пользователей по имени и фамилии - добавляем составной индекс по полям 'first_name' и 'last_name'.
-- 1.2. Поиск/сортировка пользователей только по фамилии - добавляем индекс по полю 'last_name'.
-- 1.3. Поиск/сортировка пользователей по телефону или e-mail - соответствующие индексы в базе уже есть.

-- 1.4. Поиск в таблице 'profiles' по полю 'user_id'- соответствующий индекс в базе уже есть.
-- 1.5. Поиск в таблице 'profiles' по полю 'birthday'- добавляем индекс.

-- 1.6. Поиск/сортировка в таблице 'communities' по наименованию - индекс уже есть.
-- 1.7. Поиск в таблице 'communities_users' по полям 'user_id' или 'community_id' - индекс по 'user_id' уже есть. 
--      Создаем индекс по полю 'community_id'.

-- 1.8. Поиск в таблице 'friendship' по полю 'user_id' - добавляем индекс по этому полю.
-- 1.9. Поиск в таблице 'friendship' по полям 'user_id' + 'friend_id' - составной индекс уже есть.

-- 1.10. Поиск в таблице 'likes' по полю 'user_id' - добавляем индекс.
-- 1.11. Поиск в таблице 'likes' по полям 'target_type' + 'target_id' - добавляем составной индекс по этим полям.

-- 1.12. Поиск в таблице 'media' по полям 'user_id' или 'media_type_id'- соответствующие индексы в базе уже есть.
-- 1.13. Поиск в таблице 'media' по полям 'media_type_id' + 'user_id' - добавляем составной индекс по этим полям.

-- 1.14. Поиск в таблице 'messages' по полям 'from_user_id' + 'to_user_id' - добавляем составной индекс по этим полям.
-- 1.15. Полнотекстовый поиск в таблице 'messages' по полю 'body' - добавляем fulltext индекс по этому полю.

-- 1.16. Поиск в таблице 'posts' по полям 'user_id' или 'media_id' или 'community_id' - соответствующие индексы в базе уже есть.
-- 1.17. Полнотекстовый поиск в таблице 'posts' по полям 'head' или 'body' - добавляем fulltext индексы по этим полям.

-- (Индексы могут добавляться/изменяться в процессе эксплуатации БД)
-- ------------------------------------------------------------------------------------------------------------------------------

-- 2. Задание на оконные функции
-- Построить запрос, который будет выводить следующие столбцы:
-- имя группы
-- среднее количество пользователей в группах (сумма количества пользователей во всех группах делённая на количество групп)
-- самый молодой пользователь в группе (желательно вывести имя и фамилию)
-- самый старший пользователь в группе (желательно вывести имя и фамилию)
-- количество пользователей в группе
-- всего пользователей в системе (количество пользователей в таблице users)
-- отношение в процентах для последних двух значений (общее количество пользователей в группе / всего пользователей в системе) * 100
   
     
 SELECT
	DISTINCT com.name AS 'Группа',
	COUNT(com_users.user_id) OVER() / (
	SELECT
		COUNT(*)
	FROM
		communities) AS 'Сред. кол-во пользователей',
	FIRST_VALUE(CONCAT(users.first_name, ' ', users.last_name)) OVER (com_partition
ORDER BY
	profiles.birthday DESC) AS 'Самый молодой польз-ль',
	FIRST_VALUE(CONCAT(" ", users.first_name, users.last_name)) OVER (com_partition
ORDER BY
	profiles.birthday ASC) AS 'Старший пользователь',
	COUNT(com_users.user_id) OVER com_partition AS 'Пользователей в группе',
	(
	SELECT
		COUNT(*)
	FROM
		users) AS 'Всего пользователей',
	COUNT(com_users.user_id) OVER com_partition / (
	SELECT
		COUNT(*)
	FROM
		users) * 100 AS '%'
FROM
	communities AS com
LEFT JOIN communities_users AS com_users ON
	com_users.community_id = com.id
LEFT JOIN users ON
	com_users.user_id = users.id
LEFT JOIN profiles ON
	profiles.user_id = users.id WINDOW com_partition AS (PARTITION BY com.id);
     
 